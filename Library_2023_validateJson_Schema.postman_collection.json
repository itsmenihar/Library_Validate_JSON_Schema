{
	"info": {
		"_postman_id": "3a5fa317-4ffb-42db-aa1c-c81af42adf86",
		"name": "Library_2023_validateJson_Schema",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19328607",
		"_collection_link": "https://www.postman.com/universal-comet-137010/workspace/automation-testing/collection/19328607-3a5fa317-4ffb-42db-aa1c-c81af42adf86?action=share&source=collection_link&creator=19328607"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"flag\",false);\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"const bookId = jsonData.ID;\r",
							"pm.environment.set(\"book_id\",bookId);\r",
							"function cleanupScript()\r",
							"{\r",
							"    const book_id = generateBookId();\r",
							"    pm.environment.set(\"book_id\",book_id);\r",
							"    pm.collectionVariables.set(\"flag\",true);\r",
							"    postman.setNextRequest(\"DeleteBook\");\r",
							"}\r",
							"\r",
							"function generateBookId()\r",
							"{\r",
							"    const expected_id = req.isbn + req.aisle;\r",
							"    return expected_id;\r",
							"}\r",
							"pm.test(\"Validate Status code is 200\",function()\r",
							"{\r",
							"    try\r",
							"    {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonData).have.property(\"Msg\");\r",
							"        pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"    }\r",
							"    catch(err)\r",
							"    {\r",
							"        if(jsonData.msg.includes(\"exists\"))\r",
							"        {\r",
							"            cleanupScript();\r",
							"        }\r",
							"    }\r",
							"\r",
							"});\r",
							"pm.test(\"Headers cookies responsetime validation\",function()\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"});\r",
							"pm.test(\"ID logic validation\",function()\r",
							"{\r",
							"    const expected_id = generateBookId();\r",
							"    pm.expect(expected_id).to.eql(bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.globals.get(\"companyCode\"));\r",
							"const code = pm.globals.get(\"companyCode\");\r",
							"const val = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"isbn\",code + val);\r",
							"pm.collectionVariables.set(\"book_name\",pm.iterationData.get(\"BookName\"));\r",
							"console.log(pm.collectionVariables.get(\"book_name\"));\r",
							"pm.collectionVariables.set(\"author_name\",pm.iterationData.get(\"Author\"));\r",
							"console.log(pm.collectionVariables.get(\"author_name\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{book_name}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"aisle\": \"415\",\r\n    \"author\": \"{{author_name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema ={\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Validate the Json schema\",()=>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?AuthorName=BadGuy",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "AuthorName",
							"value": "BadGuy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate the Json response code\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\");\r",
							"    if(pm.collectionVariables.get(\"flag\"))\r",
							"    {\r",
							"        postman.setNextRequest(\"AddBook\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\": \"{{book_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}